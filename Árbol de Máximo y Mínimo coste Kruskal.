class Grafo:
    def __init__(self, vertices):
        self.vertices = vertices
        self.aristas = []

    def agregar_arista(self, inicio, fin, peso):
        self.aristas.append((inicio, fin, peso))

def encontrar_padre(padres, vertice):
    if padres[vertice] == vertice:
        return vertice
    return encontrar_padre(padres, padres[vertice])

def unir(padres, rango, conjunto1, conjunto2):
    raiz1 = encontrar_padre(padres, conjunto1)
    raiz2 = encontrar_padre(padres, conjunto2)

    if rango[raiz1] < rango[raiz2]:
        padres[raiz1] = raiz2
    elif rango[raiz1] > rango[raiz2]:
        padres[raiz2] = raiz1
    else:
        padres[raiz1] = raiz2
        rango[raiz2] += 1

def kruskal(grafo):
    grafo.aristas = sorted(grafo.aristas, key=lambda x: x[2])
    resultado = []
    padres = [i for i in range(grafo.vertices)]
    rango = [0] * grafo.vertices

    for arista in grafo.aristas:
        inicio, fin, peso = arista
        conjunto1 = encontrar_padre(padres, inicio)
        conjunto2 = encontrar_padre(padres, fin)

        if conjunto1 != conjunto2:
            resultado.append(arista)
            unir(padres, rango, conjunto1, conjunto2)

    return resultado

def mostrar_paso_a_paso(grafo):
    resultado = kruskal(grafo)

    for arista in resultado:
        print(f'Arista: {arista[0]} - {arista[1]}, Peso: {arista[2]}')

# Uso del cÃ³digo
grafo = Grafo(4)
grafo.agregar_arista(0, 1, 10)
grafo.agregar_arista(0, 2, 6)
grafo.agregar_arista(0, 3, 5)
grafo.agregar_arista(1, 3, 15)
grafo.agregar_arista(2, 3, 4)

mostrar_paso_a_paso(grafo)
